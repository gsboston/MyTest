https://www.jianshu.com/p/2df6dcddb0d7

vue3.0后使用es6的proxy代替defineProperty

响应式：
1.利用Proxy或Object.defineProperty生成的Observer针对对象/对象的属性进行"劫持",在属性发生变化后通知订阅者
2.解析器Compile解析模板中的Directive(指令)，收集指令所依赖的方法和数据,等待数据变化然后进行渲染
3.Watcher属于Observer和Compile桥梁,它将接收到的Observer产生的数据变化,并根据Compile提供的指令进行视图渲染,使得数据变化促使视图变化

一、基于Object.defineProperty双向绑定的特点
Object.defineProperty的第一个缺陷,无法监听数组变化。 然而Vue的文档提到了Vue是可以检测到数组变化的，
但是只有以下八种方法,vm.items[indexOfItem] = newValue这种是无法检测的
push()
pop()
shift()
unshift()
splice()
sort()
reverse()
vue对数组的变异方法进行了包裹，所以才会触发视图更新。
通过下标，改变长度是不会触发的，可以使用vm.$set(vm.items, indexOfItem, newValue)
同时vue不能响应对象属性的添加或删除，也可以使用$set

可以使用数组hack方法，vue中使用的是~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

第二个缺陷,只能劫持对象的属性,因此我们需要对每个对象的每个属性进行遍历，
如果属性值也是对象那么需要深度遍历,显然能劫持一个完整的对象是更好的选择。

二、Proxy实现的双向绑定的特点
它在目标对象之前架设一层“拦截，Proxy可以直接监听对象而非属性，是前者的加强
set的时候可以获取到原对象，属性key，值，新对象
Proxy直接可以劫持整个对象,并返回一个新对象,不管是操作便利程度还是底层功能上都远强于Object.defineProperty。

Proxy可以直接监听数组的变化
当然,Proxy的劣势就是兼容性问题