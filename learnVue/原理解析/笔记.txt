核心：数据驱动 组件化 响应式原理 1-4
准备工作：flow、目录结构、源码构建
数据驱动：数据->dom创建完整流程
组件化：组件创建、组件相关核心概念
响应式原理：数据变化驱动视图变化、对象创建+依赖搜集+更新的时间、组件更新

编译：parse optimize codegen 5
parse：模板-》AST树
optimize：优化AST树
codegen：AST树->代码

扩展：event、v-model slot、keep-alive transition 6
event、v-model：事件和v-model的实现原理
slot、keep-alive:内置组件的实现原理
transition：过度实现原理

生态：vue-router vuex 7-8
vue-router：官方路由实现原理
vuex：实现原理


开始

1.flow
->snpm install -g flow-bin   ->flow init
flow是js静态类检查工具，vue利用它做了静态类型检查。
静态类型检查方式，类型推断、类型注释
vue源码用flow编写的。

源码目录
2.0+入了vdom。
compile是编译相关代码
core是一些公用工具、vdom、事件生命周期处理等等
platform：web浏览器程序，weex跨端
server服务的渲染
sfc解释器，可以把单文件编译成js对象
shared辅助方法

源码构建
基于rollup
runtime only vs runtime+compile
通常利用vue-cli去初始化vue项目的时候会询问两种版本
runtime only：需要借助webpack的vue-loader工具吧vue文件编译成js，
因为在编译阶段做的，所以只包含运行时的代码，体积更小

runtime+compile：如果没有做预编译，但又使用了vue的template属性传入一个字符串，
则需要在客户端编译模板，
需要编译
new Vue({
    template:'<div>{{msg}}</div>'
})

不需要编译
new Vue({
    render(h){
        return h('div',this.msg)
    }
})

import vue后操作
用函数实现的类，在原型上挂一些方法
function Vue中有个判断this instanceof Vue，需要new调用Vue，否则报错
initMixin():在vue的原型上挂载_init方法
stateMixin()：同上，$set $delete $watch
其他类似
为什么用es5而不用es6呢？因为es6想要实现这个效果就不容易实现，es5可以在vue原型上
挂很多方法，并且把这些方法拆分到不同文件下，好处是方便代码的管理。不用单文件定义，
而是按模块的组织关系把vue的原型拆分到不同文件中。

global-api为Vue添加静态方法
Vue.options._base=Vue

数据驱动
new Vue发生了什么
this._init(options),_init是原型方法，在初始化执行initMixin的时候定义的。
之前看到代码就是在initMixin中执行的。
还包括初始化生命周期，事件，render、callhook(beforeCreate)、initInjections、initState、initProvide、callHook(created)
在initState中，初始化props methiods data
initData，拿到data还赋值给了vm._data，判断是否为function，并且不能props，methods重复
因为最后都会挂载到vm实例上。挂载就是通过proxy实现的。访问的就是this._data.key

然后执行observe做了响应式处理

原型方法$mount
可以写template，可以不写，将el转换成dom，禁止挂载html、body，最终转换成render函数，
执行渲染watcher，传入updateComponent函数。
相当于看的代码中的compile中的逻辑

原型方法vm._render返回vNode
拿到$options.render函数，这个函数可以是自己写的也可以是通过el生成的，

vdom，参考了snabbdom
vdom除了它的数据结构定义，映射到真是的dom实际上要经历Vnode的create，diff，patch等过程。
create是通过之前提到的createElement方法创建的。

es6 proxy