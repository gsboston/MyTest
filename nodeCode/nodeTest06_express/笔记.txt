let id='1; DELETE FROM user_table;';

let sql=`SELECT * FROM user_table WHERE ID=${id}`;



let helper=require('./helper');

./helper.js
./helper/index.js

--------------------------------------------------------------------------------

框架：
1.express promise + generator
2.koa async/await
v1 v2 v3

--------------------------------------------------------------------------------

中间件-插件，增强框架功能

get('url', fn);
post('url', fn);
use('url', fn);

get(fn);
post(fn);
use(fn);

传参：
往对象身上放

--------------------------------------------------------------------------------

数据
GET     req.query
POST    body-parser

--------------------------------------------------------------------------------

老师你刚说随来随切要怎么做？
自动机

--------------------------------------------------------------------------------

线程：
同一个进程之内的线程之间共享内存、共享计数器
性能高
安全性低

进程：
每个进程有自己的独立的内存、独立的计数器
性能低
安全性高

java多线程 python多进程
--------------------------------------------------------------------------------

JS：
new Worker();

Node：
cluster.fork()

--------------------------------------------------------------------------------

多进程、多线程
基于事件-epoll
node-回调
--------------------------------------------------------------------------------

post：body-parser
文件：multer
cookie：存储在浏览器，请求服务器的时候，会顺便发给服务器
  不安全的

session：存储在服务器，不是独立的，基于cookie
  安全问题：session劫持
  缩短有效期

  （存在cookie里的session-ID）->token

--------------------------------------------------------------------------------

cookie不跨域

www.baidu.com -> baidu.com
baidu.com -x> www.baidu.com

domain: 'baidu.com'


/user   =>    /
/       =x>   /user

path: '/'

--------------------------------------------------------------------------------

签名：
s:99.8.Tal7fIJ2XOtDac3lVhJNEONm3De97RXTHjrEeci7TvQ
s:值.签名

99.8
s:99.8.Tal7fIJ2XOtDac3lVhJNEONm3De97RXTHjrEeci7TvQ

--------------------------------------------------------------------------------

session：
cookie-session
session大多数是存在服务器文件中，也可以存放到redis、数据库、内存中。
mysql-session 用于将session放到mysql中
--------------------------------------------------------------------------------
签名不可逆
加密可逆
pki
--------------------------------------------------------------------------------

中间件
https://blog.csdn.net/huang100qi/article/details/80220012
https://www.jianshu.com/p/9b9b99b9a3b1

“Express是一个自身功能极简，完全是路由和中间件构成一个web开发框架：从本质上来说，一个Express应用就是在调用各种中间件。”
由此可见，中间件在Express开发中的重要性，因此这里我们就专门来总结一下中间件。

当每个请求到达服务器时，nodejs会为请求创建一个请求对象（request），该请求对象包含客户端提交上来的数据。
同时也会创建一个响应对象（response），响应对象主要负责将服务器的数据响应到客户端。而最后一个参数next是一个方法，
因为一个应用中可以使用多个中间件，而要想运行下一个中间件，那么上一个中间件必须运行next()。

内置中间件
自定义中间件
第三方中间件


中间件可以总结以下几点：

1、封装了一些处理一个完整事件的功能函数。

2、非内置的中间件需要通过安装后，require到文件就可以运行。

3、封装了一些或许复杂但肯定是通用的功能。



-————————
中间件(MiddleWare)可以理解为一个对用户请求进行过滤和预处理的东西，它一般不会直接对客户端进行响应，
而是将处理之后的结果传递下去。其实它就是相当于一个过滤器类似于javeEE中的`filter`。
其实，express中的中间件是使用了Connect中间件框架。（Connect是一个中间件框架它的作者与express的作者是同一个人）
在3.0的版本中express是包含了Connect的中间件，而在最新的4.0版本中express不再依赖Connect，
而且从内核中移除了除`express.static`外的所有内置中间件。也就是说现有的express是一个独立的路由和中间件web框架，
express的版本升级不再受中间件更新的影响

如果你需要这些中间件需要显示的添加。步骤如下：
1、 安装模块：npm install --save <module-name>
2、 在应用中引入模块：require('module-name')
3、 按照文档的描述使用模块：app.use( ... )